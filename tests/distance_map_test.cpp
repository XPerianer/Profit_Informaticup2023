#include "fields/distance_map.hpp"

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include <vector>

#include "fields/occupancy_map.hpp"
#include "geometry/vec2.hpp"
#include "io/parsing.hpp"
#include "miscellany/connected_component.hpp"
#include "objects/placeable.hpp"
#include "resources/example_tasks.hpp"

using namespace geometry;
using namespace profit;
using namespace parsing;

// NOLINTBEGIN(readability-identifier-length): Keep visualization of expected fields comprehensible
const int n = static_cast<int>(NOT_REACHABLE);
// NOLINTEND(readability-identifier-length)

class DistanceMapTest : public testing::Test {
 protected:
  // we can't define a ctor with parameters, this is a workaround we have to call inside the tests
  // https://stackoverflow.com/a/38218657
  void set_up(const std::string_view& example) {
    std::istringstream stream{std::string{example}};
    input_ = parsing::parse(stream);
    occupancy_map_ = occupancies_from(input_);
    deposits_ = input_.deposits;
  }

  void test_distances(const std::vector<std::vector<DistanceT>>& expected_distances) {
    ConnectedComponentsWrapper components_wrapper(static_cast<DepositId>(deposits_.size()),
                                                  occupancy_map_.dimensions());
    for (size_t i = 0; i < deposits_.size(); i++) {
      DistanceMap distance_map = distances_from(deposits_[i], occupancy_map_, &components_wrapper,
                                                static_cast<DepositId>(i));
      EXPECT_THAT(distance_map.map(), testing::ElementsAreArray(expected_distances[i]));
    }
  }

  void test_merged(const std::vector<DistanceT>& expected) {
    ConnectedComponentsWrapper components_wrapper(static_cast<DepositId>(deposits_.size()),
                                                  occupancy_map_.dimensions());
    std::vector<DistanceMap> distance_maps;
    distance_maps.reserve(deposits_.size());

    for (size_t i = 0; i < deposits_.size(); i++) {
      distance_maps.emplace_back(distances_from(deposits_[i], occupancy_map_, &components_wrapper,
                                                static_cast<DepositId>(i)));
    }

    EXPECT_THAT(merge(distance_maps).map(), testing::ElementsAreArray(expected));
  }

  Input input_;
  OccupancyMap occupancy_map_{Vec2{0, 0}};
  std::vector<Deposit> deposits_;
};

TEST_F(DistanceMapTest, Task1) {
  set_up(examples::TASK1);
  test_distances(
      {{
           // clang-format off
           n,  n,  n,  n,  n,  n,  2,  2,  2,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  2,  2,  1,  1,  n,  n,  3,  3,  3,  3,  4,  4,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  2,  2,  1,  1,  n,  n,  3,  3,  3,  4,  4,  4,  4,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  2,  2,  1,  1,  n,  n,  3,  3,  4,  4,  4,  4,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  1,  2,  1,  1,  n,  n,  3,  4,  4,  4,  4,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  1,  1,  1,  1,  n,  n,  4,  4,  4,  4,  5,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           1,  n,  n,  n,  n,  n,  1,  1,  2,  1,  2,  n,  n,  4,  4,  4,  5,  5,  5,  5,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           1,  1,  1,  2,  2,  1,  1,  1,  1,  2,  2,  n,  n,  4,  4,  5,  5,  5,  5,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           2,  1,  2,  2,  2,  1,  1,  1,  2,  2,  2,  n,  n,  4,  5,  5,  5,  5,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n, 
           1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           2,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8, 
           2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8, 
           2,  n,  n,  n,  n,  n,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8, 
           n,  n,  n,  n,  n,  n,  n,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8, 
           n,  n,  n,  n,  n,  n,  n,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9, 
           n,  n,  n,  n,  n,  n,  n,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9, 
           n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9, 
           n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 
           n,  n,  n,  n,  n,  n,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10,
           // clang-format on
       },
       {
           // clang-format off
           n,  n,  n,  n,  n,  n,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  5,  n,  n,  6,  6,  6,  7,  7,  7,  7,  8,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  4,  n,  n,  7,  7,  7,  7,  7,  7,  8,  8,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  3,  4,  4,  4,  n,  n,  7,  7,  7,  7,  7,  8,  8,  8,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  3,  3,  4,  4,  n,  n,  7,  7,  7,  7,  8,  8,  8,  8,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  3,  3,  3,  4,  n,  n,  7,  7,  7,  8,  8,  8,  8,  9,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           2,  n,  n,  n,  n,  n,  2,  3,  3,  3,  3,  n,  n,  8,  8,  8,  8,  8,  8,  9,  9,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  n,  n,  8,  8,  8,  8,  8,  9,  9,  9,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  n,  n,  8,  8,  8,  8,  9,  9,  9,  9, 10,  n,  n,  n,  n,  n,  n,  n,  n, 
           2,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           2,  2,  2,  2,  2,  1,  2,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7, 
           2,  2,  2,  2,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7, 
           2,  n,  n,  n,  n,  n,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6, 
           n,  n,  n,  n,  n,  n,  n,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6, 
           n,  n,  n,  n,  n,  n,  n,  2,  2,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6, 
           n,  n,  n,  n,  n,  n,  n,  2,  2,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6, 
           n,  n,  n,  n,  n,  n,  n,  1,  2,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6, 
           n,  n,  n,  n,  n,  n,  n,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6, 
           n,  n,  n,  n,  n,  n,  1,  1,  2,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,
           // clang-format on
       },
       {
           // clang-format off
             n,  n,  n,  n,  n,  n,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  2,  1,  2,  1,  1,  n,  n,  n,  n,  n,  n,  n,  n, 
             n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  4,  n,  n,  2,  2,  2,  2,  1,  1,  1,  1,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
             n,  n,  n,  n,  n,  n,  n,  5,  4,  4,  4,  n,  n,  2,  2,  2,  2,  1,  1,  2,  1,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
             n,  n,  n,  n,  n,  n,  n,  5,  5,  4,  4,  n,  n,  2,  2,  2,  2,  1,  1,  2,  1,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
             n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  4,  n,  n,  2,  2,  2,  2,  1,  1,  2,  1,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
             n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  n,  n,  2,  2,  2,  2,  1,  1,  2,  2,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
             8,  n,  n,  n,  n,  n,  6,  6,  5,  5,  5,  n,  n,  2,  2,  2,  2,  1,  1,  2,  2,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
             8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  n,  n,  2,  2,  2,  2,  1,  1,  2,  2,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
             8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  n,  n,  3,  2,  2,  2,  2,  1,  2,  2,  2,  n,  n,  n,  n,  n,  n,  n,  n, 
             8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
             8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
             9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 
             9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 
             9,  n,  n,  n,  n,  n,  8,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 
             n,  n,  n,  n,  n,  n,  n,  8,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 
             n,  n,  n,  n,  n,  n,  n,  8,  8,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 
             n,  n,  n,  n,  n,  n,  n,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 
             n,  n,  n,  n,  n,  n,  n,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 
             n,  n,  n,  n,  n,  n,  n,  9,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 
             n,  n,  n,  n,  n,  n,  9,  9,  9,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13,
           // clang-format on
       }});
}

TEST_F(DistanceMapTest, Task2) {
  set_up(examples::TASK2);
  test_distances({{
      // clang-format off
            n, n, n, n, n, n, 2, 2, 1, 3, 3, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6,
            n, n, n, n, n, n, 2, 3, 3, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 
            n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, 5, 5, 5, 5, 6,
            n, n, n, n, n, n, 2, 2, 1, 3, 3, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6,
            n, n, n, n, n, n, 2, 3, 3, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5,
      // clang-format on
  }});
}

TEST_F(DistanceMapTest, Task3) {
  set_up(examples::TASK3);
  test_distances(
      {{
           // clang-format off
           n,  n,  n,  n,  n,  n,  n,  n,  2,  2,  2,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  2,  2,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  2,  2,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  2,  2,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  1,  2,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  1,  2,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  1,  2,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8, 
           1,  n,  n,  n,  n,  n,  n,  n,  1,  1,  2,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8, 
           1,  1,  1,  1,  1,  2,  2,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9, 
           2,  1,  2,  2,  2,  2,  2,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9, 
           1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9, 
           2,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 
           2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 
           2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 
           2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 
           3,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 
           3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 
           3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 
           3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 
           4,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 
           4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 
           4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 
           4,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 
           5,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 
           5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 
           5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 
           5,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 
           6,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 
           6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 
           6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 
           6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 
           7,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 
           7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 
           7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 
           7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14,  n,  n,  n, 15, 
           8,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14,  n,  n,  n,  n,  n, 
           8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14,  n,  n,  n,  n,  n, 
           8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15,  n,  n,  n,  n,  n, 
           8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15,  n,  n,  n, 16,
           // clang-format on
       },
       {
           // clang-format off
           n,  n,  n,  n,  n,  n,  n,  n, 16, 16, 16, 15, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  9, 
           n,  n,  n,  n,  n,  n,  n,  n,  n, 16, 15, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9, 
           n,  n,  n,  n,  n,  n,  n,  n,  n, 15, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9,  9, 
           n,  n,  n,  n,  n,  n,  n,  n,  n, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  9, 
           n,  n,  n,  n,  n,  n,  n,  n,  n, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  8, 
           n,  n,  n,  n,  n,  n,  n,  n,  n, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  8,  8, 
           n,  n,  n,  n,  n,  n,  n,  n,  n, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  8,  8,  8, 
           n,  n,  n,  n,  n,  n,  n,  n,  n, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  8, 
          16,  n,  n,  n,  n,  n,  n,  n, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  7, 
          16, 16, 15, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  7,  7, 
          16, 15, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  7,  7,  7, 
          15, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  7, 
          15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  6, 
          15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  6,  6, 
          15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  6,  6,  6, 
          14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  6, 
          14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  5, 
          14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  5,  5, 
          14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  5,  5,  5, 
          13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  5, 
          13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  4, 
          13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  4,  4, 
          13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  4,  4,  4, 
          12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  4, 
          12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  3, 
          12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  3,  3, 
          12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  3,  3,  3, 
          11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  3, 
          11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  2,  2, 
          11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2, 
          11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2, 
          10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  2,  1,  1,  1,  2, 
          10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  2,  1,  1,  1,  1,  1, 
          10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  2,  1,  1,  1,  2,  1,  2, 
          10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  2,  1,  1,  1,  1,  2,  2,  1, 
           9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  2,  1,  2,  1,  2,  n,  n,  n,  2, 
           9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  2,  1,  1,  1,  2,  n,  n,  n,  n,  n, 
           9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  2,  1,  1,  2,  2,  n,  n,  n,  n,  n, 
           9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  2,  1,  1,  2,  2,  n,  n,  n,  n,  n, 
           9,  9,  9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  5,  5,  4,  4,  4,  4,  3,  3,  3,  3,  2,  2,  2,  2,  1,  2,  2,  2,  n,  n,  n,  3,
           // clang-format on
       }});
}

TEST_F(DistanceMapTest, Task4) {
  set_up(examples::TASK4);
  test_distances(
      {{
           // clang-format off
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  6,  7,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  5,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  4,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  4,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           1,  1,  1,  1,  1,  2,  2,  2,  n,  n,  n,  n,  3,  4,  n,  5,  5,  n,  n,  n,  n,  7,  7,  7,  8,  8,  8,  8,  9, 
           2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  n,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8, 
           1,  1,  1,  1,  1,  1,  1,  1,  n,  n,  n,  n,  3,  4,  n,  5,  5,  n,  n,  n,  n,  7,  7,  7,  8,  8,  8,  8,  9, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  4,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  4,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  5,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  6,  7,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
           // clang-format on
       },
       {
           // clang-format off
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  6,  7,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  5,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  4,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  4,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           1,  1,  1,  1,  1,  1,  1,  1,  n,  n,  n,  n,  3,  4,  n,  5,  5,  n,  n,  n,  n,  7,  7,  7,  8,  8,  8,  8,  9, 
           2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  n,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8, 
           2,  2,  2,  1,  1,  1,  1,  1,  n,  n,  n,  n,  3,  4,  n,  5,  5,  n,  n,  n,  n,  7,  7,  7,  8,  8,  8,  8,  9, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  4,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  4,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  4,  5,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  6,  7,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
           // clang-format on
       },
       {
           // clang-format off
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  7,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  6,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  5,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  4,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  4,  4,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           9,  8,  8,  8,  8,  7,  7,  7,  n,  n,  n,  n,  5,  5,  n,  4,  3,  n,  n,  n,  n,  1,  1,  1,  1,  1,  2,  2,  2, 
           8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  n,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
           9,  8,  8,  8,  8,  7,  7,  7,  n,  n,  n,  n,  5,  5,  n,  4,  3,  n,  n,  n,  n,  1,  1,  1,  1,  1,  1,  1,  1, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  4,  4,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  4,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  5,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  6,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  7,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
           // clang-format on
       },
       {
           // clang-format off
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  7,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  6,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  5,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  4,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  4,  4,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           9,  8,  8,  8,  8,  7,  7,  7,  n,  n,  n,  n,  5,  5,  n,  4,  3,  n,  n,  n,  n,  1,  1,  1,  1,  1,  1,  1,  1, 
           8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  n,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
           9,  8,  8,  8,  8,  7,  7,  7,  n,  n,  n,  n,  5,  5,  n,  4,  3,  n,  n,  n,  n,  2,  2,  2,  1,  1,  1,  1,  1, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  4,  4,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  4,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  4,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  4,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  5,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  6,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  7,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
           n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
           // clang-format on
       }});
}

TEST_F(DistanceMapTest, Task1Merged) {
  set_up(examples::TASK1);
  test_merged({
      // clang-format off
            n,  n,  n,  n,  n,  n,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  4,  4,  4,  5,  n,  n,  6,  6,  6,  7,  7,  7,  7,  8,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  5,  4,  4,  4,  n,  n,  7,  7,  7,  7,  7,  7,  8,  8,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  5,  5,  4,  4,  n,  n,  7,  7,  7,  7,  7,  8,  8,  8,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  4,  n,  n,  7,  7,  7,  7,  8,  8,  8,  8,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  n,  n,  7,  7,  7,  8,  8,  8,  8,  9,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            8,  n,  n,  n,  n,  n,  6,  6,  5,  5,  5,  n,  n,  8,  8,  8,  8,  8,  8,  9,  9,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  n,  n,  8,  8,  8,  8,  8,  9,  9,  9,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  n,  n,  8,  8,  8,  8,  9,  9,  9,  9, 10,  n,  n,  n,  n,  n,  n,  n,  n, 
            8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 
            9,  9,  8,  8,  8,  8,  7,  7,  7,  7,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 
            9,  n,  n,  n,  n,  n,  8,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 
            n,  n,  n,  n,  n,  n,  n,  8,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 
            n,  n,  n,  n,  n,  n,  n,  8,  8,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 
            n,  n,  n,  n,  n,  n,  n,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 
            n,  n,  n,  n,  n,  n,  n,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 
            n,  n,  n,  n,  n,  n,  n,  9,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 
            n,  n,  n,  n,  n,  n,  9,  9,  9,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13
      // clang-format on
  });
}

TEST_F(DistanceMapTest, Task2Merged) {
  set_up(examples::TASK2);
  test_merged({
      // clang-format off
       n,  n,  n,  n,  n,  n,  2,  2,  1,  3,  3,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,
       n,  n,  n,  n,  n,  n,  2,  3,  3,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5, 
       n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  6,
       n,  n,  n,  n,  n,  n,  2,  2,  1,  3,  3,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,
       n,  n,  n,  n,  n,  n,  2,  3,  3,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,
      // clang-format on
  });
}

TEST_F(DistanceMapTest, Task3Merged) {
  set_up(examples::TASK3);
  test_merged({
      // clang-format off
                     n,  n,  n,  n,  n,  n,  n,  n, 16, 16, 16, 15, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  9, 
                     n,  n,  n,  n,  n,  n,  n,  n,  n, 16, 15, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9, 
                     n,  n,  n,  n,  n,  n,  n,  n,  n, 15, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9,  9, 
                     n,  n,  n,  n,  n,  n,  n,  n,  n, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  9, 
                     n,  n,  n,  n,  n,  n,  n,  n,  n, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  8, 
                     n,  n,  n,  n,  n,  n,  n,  n,  n, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  8,  8, 
                     n,  n,  n,  n,  n,  n,  n,  n,  n, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  8,  8,  8, 
                     n,  n,  n,  n,  n,  n,  n,  n,  n, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8, 
                    16,  n,  n,  n,  n,  n,  n,  n, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8, 
                    16, 16, 15, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9, 
                    16, 15, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9, 
                    15, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9, 
                    15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 
                    15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 
                    15, 14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 
                    14, 14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 
                    14, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 
                    14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 
                    14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 
                    13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 
                    13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 
                    13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 
                    13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 
                    12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 
                    12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 
                    12, 12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 
                    12, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 
                    11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 
                    11, 11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 
                    11, 11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 
                    11, 10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 
                    10, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 
                    10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 
                    10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 
                    10,  9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 
                     9,  9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14,  n,  n,  n, 15, 
                     9,  9,  9,  8,  8,  8,  8,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14,  n,  n,  n,  n,  n, 
                     9,  9,  9,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14,  n,  n,  n,  n,  n, 
                     9,  9,  9,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15,  n,  n,  n,  n,  n, 
                     9,  9,  9,  9,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15,  n,  n,  n, 16,
      // clang-format on
  });
}

TEST_F(DistanceMapTest, Task4Merged) {
  set_up(examples::TASK4);
  test_merged({
      // clang-format off
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  7,  6,  6,  6,  7,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  5,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  5,  5,  5,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  4,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  4,  4,  4,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            9,  8,  8,  8,  8,  7,  7,  7,  n,  n,  n,  n,  5,  5,  n,  5,  5,  n,  n,  n,  n,  7,  7,  7,  8,  8,  8,  8,  9, 
            8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  n,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8, 
            9,  8,  8,  8,  8,  7,  7,  7,  n,  n,  n,  n,  5,  5,  n,  5,  5,  n,  n,  n,  n,  7,  7,  7,  8,  8,  8,  8,  9, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  4,  4,  4,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  4,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  5,  5,  5,  5,  5,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  5,  5,  5,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  5,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  6,  6,  6,  6,  6,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  7,  6,  6,  6,  7,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n, 
            n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
      // clang-format on
  });
}

TEST_F(DistanceMapTest, MultipleConnectedComponentsMerged) {
  set_up(examples::MULTIPLE_CONNECTED_COMPONENTS);
  test_merged({
      // clang-format off
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
         n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,  n,
      // clang-format on
  });
}
